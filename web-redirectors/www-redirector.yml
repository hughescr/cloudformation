AWSTemplateFormatVersion: 2010-09-09
Description: 'Redirector for http(s)://${DomainName}/* -> https://www.${DomainName}/*'

Parameters:
  DomainName:
    Type: String
    Default: example.com
    Description: The domain name which should be redirected to www.domain.tld
  Route53HostedZoneId:
    Type: String
    Default: Z123456ABCDE or $SomeExport
    Description: The HostedZoneId of the already-existing domain above in Route53 or $SomeExport to fetch the ZoneId from a cloudformation export

Conditions:
  Route53ZoneIdParamIsImported:
    !And [
      !Not [ !Equals [ !Ref Route53HostedZoneId , ""]],
      !Equals [ !Select [ 0, !Split [ "$", !Ref Route53HostedZoneId ]], ""]
    ]

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref DomainName
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Join ['.', ['www', !Ref DomainName]]
          Protocol: https

  CertificateManagerCertificate:
    Type: 'Custom::DNSCertificate'
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Ref DomainName
      ValidationMethod: DNS
      # Needs to be in us-east-1 because of CloudFront limitations
      Region: us-east-1
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId:
            !If
              - Route53ZoneIdParamIsImported
              - Fn::ImportValue:
                  !Select [ 1, !Split [ "$", !Ref Route53HostedZoneId ]]
              - !Ref Route53HostedZoneId
      ServiceToken: !ImportValue 'CertificateAccepterLambda-Arn'

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref S3Bucket
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginProtocolPolicy: http-only
              OriginReadTimeout: 30
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
            DomainName: !Sub '${S3Bucket}.s3-website.${AWS::Region}.amazonaws.com'
            Id: !Sub '${S3Bucket}.s3.${AWS::Region}.amazonaws.com'
            OriginPath: ''
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
          SmoothStreaming: false
          TargetOriginId: !Sub '${S3Bucket}.s3.${AWS::Region}.amazonaws.com'
          ViewerProtocolPolicy: redirect-to-https
        Comment: !Sub 'Redirector for ${DomainName} -> www.${DomainName}'
        PriceClass: PriceClass_100
        Enabled: true
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateManagerCertificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        HttpVersion: http2and3
        DefaultRootObject: ''
        IPV6Enabled: true

  Route53RecordSetARecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Sub '${DomainName}.'
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !Sub '${CloudFrontDistribution.DomainName}.'
        EvaluateTargetHealth: false
      HostedZoneName: !Sub '${DomainName}.'
    DependsOn:
      - CloudFrontDistribution

  Route53RecordSetAAAARecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Sub '${DomainName}.'
      Type: AAAA
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !Sub '${CloudFrontDistribution.DomainName}.'
        EvaluateTargetHealth: false
      HostedZoneName: !Sub '${DomainName}.'
    DependsOn:
      - CloudFrontDistribution
